{"version":3,"sources":["components/homepage/homepage.js","components/game/character.js","components/game/game.js","components/score/score.js","components/router.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","onClick","props","changePage","style","textAlign","position","left","top","transform","Component","Character","this","character","run","i","Imagesurl","length","img","Image","src","push","console","log","Game","state","screenWidth","window","innerWidth","screenHeight","innerHeight","context","distance","update","clearRect","render","rect","stroke","requestAnimationFrame","canvas","React","createRef","loadingPage","document","getElementById","current","getContext","setState","backgroundColor","width","height","backgroundPosition","backgroundRepeat","backgroundSize","ref","Router","homepage","gamepage","scorepage","music","Audio","onPage","toPage","play","addEventListener","App","isLandscape","checkIfLandscape","location","href","reload","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aeaf2441.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Homepage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.props.changePage('homepage','gamepage') } style={{ textAlign: \"center\", position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)'}} ><h1>Start</h1></button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage;","import Imagesurl from '../assets/imageurl'\r\nclass Character {\r\n    constructor(){\r\n        this.character = 'ninja';\r\n        this.run = [\r\n\r\n        ]\r\n    }\r\n    imageLoading(){\r\n        // add all the images into the run or means preload\r\n        for(var i=0; i < Imagesurl.length; i++){\r\n            var img = new Image();\r\n            img.src = Imagesurl[i];\r\n            this.run.push(img);\r\n        }\r\n    }\r\n    render(){\r\n        console.log();\r\n    }\r\n}\r\nexport default Character","import React, { Component } from 'react';\r\nimport Character from './character';\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvas = React.createRef();\r\n        this.loadingPage = document.getElementById('loading');\r\n    }\r\n    state = {\r\n        screenWidth: window.innerWidth,\r\n        screenHeight: window.innerHeight,\r\n        context: null,\r\n        distance: window.innerWidth * 0.06,\r\n        Character: Character,\r\n    }\r\n\r\n    componentDidMount() {\r\n        const context = this.canvas.current.getContext('2d');\r\n        this.setState({\r\n            context: context,\r\n        })\r\n        requestAnimationFrame(() => { this.update() });\r\n    }\r\n    update = () => {\r\n        if (this.state.context !== null) {\r\n            this.state.context.clearRect(0, 0, this.state.screenWidth, this.state.screenHeight);\r\n            this.state.Character.render();\r\n            // this.state.context.drawImage(img, 0, 0, 100, 100);\r\n            this.state.context.rect(100,100,100,100);\r\n            this.state.context.stroke();\r\n        }\r\n        requestAnimationFrame(() => { this.update() });\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ backgroundColor: 'skyblue', width: \"100%\", height: \"100vh\", backgroundPosition: 'center', backgroundRepeat: 'no-repeat', backgroundSize: 'cover' }}>\r\n                <canvas ref={this.canvas}\r\n                    width={this.state.screenWidth}\r\n                    height={this.state.screenHeight}\r\n                />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\n\r\nclass Homepage extends Component {\r\n    state = {\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button style={{ textAlign: \"center\", position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)'}}><h1>Start</h1></button>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React, { Component } from 'react';\r\nimport Homepage from './homepage/homepage';\r\nimport Gamepage from './game/game';\r\nimport Scorepage from './score/score';\r\nclass Router extends Component {\r\n    state = {\r\n        homepage: true,\r\n        gamepage: false,\r\n        scorepage: false,\r\n        music: new Audio('https://chen3337.github.io/Runner_Ninja/daydreamer.mp3'),\r\n    }\r\n    componentDidMount(){\r\n        this.state.music.play();\r\n        this.state.music.addEventListener('ended', () => {this.state.music.play();});\r\n    }\r\n    changePage = (onPage, toPage) => {\r\n        console.log(\"change\")\r\n        this.setState({\r\n            [toPage]: true,\r\n            [onPage]: false,\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.homepage ?\r\n                    <Homepage changePage={this.changePage} />\r\n                    : <div />\r\n                }\r\n                {this.state.gamepage ?\r\n                    <Gamepage changePage={this.changePage} />\r\n                    : <div />\r\n                }\r\n                {this.state.scorepage ?\r\n                    <Scorepage changePage={this.changePage} />\r\n                    : <div />\r\n                }\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Router;","import React, { Component } from 'react';\nimport Router from './components/router';\nclass App extends Component {\n  state = {\n    isLandscape: 90,\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => {\n      window.location.reload();\n      this.checkIfLandscape();\n    })\n    window.addEventListener(\"orientationchange\", () => {\n      this.checkIfLandscape();\n    });\n    this.checkIfLandscape();\n  }\n  checkIfLandscape = () => {\n    if ((window.innerWidth - 100) > window.innerHeight) {\n      if (this.state.isLandscape !== 90) {\n        window.location.href = '/';\n        this.setState({\n          isLandscape: 90\n        });\n      }\n    }\n    else {\n      this.setState({\n        isLandscape: 0\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        {this.state.isLandscape === 90\n          ? <Router />\n          : <h2>rotate the screen (landscape) or make the width of the screen larger than the height to begain\n             <br />\n            <br />\n              If on phone add this to home screen for better experience (fullscreen)\n              <br />\n            <br />\n            If on PC f11 for fullscreen</h2>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}